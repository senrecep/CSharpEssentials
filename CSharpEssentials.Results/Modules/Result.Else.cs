using CSharpEssentials.Core;
using CSharpEssentials.Errors;

namespace CSharpEssentials.ResultPattern;

/// <summary>
/// Represents a result that can be either successful or a failure with associated errors.
/// Provides methods for handling success, failure, and chaining operations.
/// </summary>
public readonly partial record struct Result
{
    /// <summary>
    /// Returns a new result if the current result is a failure, using the provided function to handle errors.
    /// </summary>
    /// <param name="onFailure">A function to handle failure, providing an array of errors.</param>
    /// <returns>A new result.</returns>
    public Result Else(Func<Error[], Error> onFailure)
    {
        if (IsSuccess)
            return this;

        return onFailure(Errors);
    }

    /// <summary>
    /// Returns a new result if the current result is a failure, using the provided function to handle errors.
    /// </summary>
    /// <param name="onFailure">A function to handle failure, providing an array of errors.</param>
    /// <returns>A new result.</returns>
    public Result Else(Func<Error[], IEnumerable<Error>> onFailure)
    {
        if (IsSuccess)
            return this;

        return From(onFailure(Errors));
    }

    /// <summary>
    /// Returns a new result if the current result is a failure, using the provided error value.
    /// </summary>
    /// <param name="error">An error to return as a result.</param>
    /// <returns>A new result.</returns>

    public Result Else(Error error)
    {
        if (IsSuccess)
            return this;

        return error;
    }

    /// <summary>
    /// Asynchronously returns a new result if the current result is a failure, using the provided async function to handle errors.
    /// </summary>
    /// <param name="onFailure">An async function to handle failure, providing an array of errors.</param>
    /// <param name="cancellationToken">A token to observe for cancellation requests.</param>
    /// <returns>A task representing the asynchronous operation that returns a new result.</returns>
    public async Task<Result> ElseAsync(Func<Error[], Task<Error>> onFailure, CancellationToken cancellationToken = default)
    {
        if (IsSuccess)
            return this;
        Error result = await onFailure(Errors).WithCancellation(cancellationToken);
        return result;
    }
    /// <summary>
    /// Asynchronously returns a new result if the current result is a failure, using the provided async function to handle errors.
    /// </summary>
    /// <param name="onFailure">An async function to handle failure, providing an array of errors.</param>
    /// <param name="cancellationToken">A token to observe for cancellation requests.</param>
    /// <returns>A task representing the asynchronous operation that returns a new result.</returns>
    public async Task<Result> ElseAsync(Func<Error[], Task<IEnumerable<Error>>> onFailure, CancellationToken cancellationToken = default)
    {
        if (IsSuccess)
            return this;

        IEnumerable<Error> errors = await onFailure(Errors).WithCancellation(cancellationToken);
        return errors.ToResult();
    }

    /// <summary>
    /// Asynchronously returns a new result if the current result is a failure, using the provided async error task.
    /// </summary>
    /// <param name="error">An async error task to return as a result.</param>
    /// <param name="cancellationToken">A token to observe for cancellation requests.</param>
    /// <returns>A task representing the asynchronous operation that returns a new result.</returns>
    public async Task<Result> ElseAsync(Task<Error> error, CancellationToken cancellationToken = default)
    {
        if (IsSuccess)
            return this;
        Error result = await error.WithCancellation(cancellationToken);
        return result;
    }
}


public static partial class ResultExtensions
{
    /// <summary>
    /// Awaits a Task and, if the operation failed, executes a function to generate a single error.
    /// </summary>
    /// <param name="task">The Task producing a Result.</param>
    /// <param name="onFailure">A function that takes the current errors and returns a single new error.</param>
    /// <param name="cancellationToken"></param>
    /// <returns>
    /// A Task containing the original Result if the operation succeeded; otherwise, a new Result with the error generated by <paramref name="onFailure"/>.
    /// </returns>
    public static async Task<Result> Else(this Task<Result> task, Func<Error[], Error> onFailure, CancellationToken cancellationToken = default)
    {
        Result result = await task.WithCancellation(cancellationToken);
        return result.Else(onFailure);
    }

    /// <summary>
    /// Awaits a Task and, if the operation failed, executes a function to generate multiple errors.
    /// </summary>
    /// <param name="task">The Task producing a Result.</param>
    /// <param name="onFailure">A function that takes the current errors and returns a collection of new errors.</param>
    /// <param name="cancellationToken"></param>
    /// <returns>
    /// A Task containing the original Result if the operation succeeded; otherwise, a new Result with the errors generated by <paramref name="onFailure"/>.
    /// </returns>
    public static async Task<Result> Else(this Task<Result> task, Func<Error[], IEnumerable<Error>> onFailure, CancellationToken cancellationToken = default)
    {
        Result result = await task.WithCancellation(cancellationToken);
        return result.Else(onFailure);
    }

    /// <summary>
    /// Awaits a Task and, if the operation failed, replaces the current errors with a specified error.
    /// </summary>
    /// <param name="task">The Task producing a Result.</param>
    /// <param name="error">The new error to replace the current errors.</param>
    /// <param name="cancellationToken"></param>
    /// <returns>
    /// A Task containing the original Result if the operation succeeded; otherwise, a new Result with the specified error.
    /// </returns>
    public static async Task<Result> Else(this Task<Result> task, Error error, CancellationToken cancellationToken = default)
    {
        Result result = await task.WithCancellation(cancellationToken);
        return result.Else(error);
    }

    /// <summary>
    /// Awaits a Task and, if the operation failed, executes an asynchronous function to generate a single error.
    /// </summary>
    /// <param name="task">The Task producing a Result.</param>
    /// <param name="onFailure">An asynchronous function that takes the current errors and returns a Task producing a new error.</param>
    /// <param name="cancellationToken"></param>
    /// <returns>
    /// A Task containing the original Result if the operation succeeded; otherwise, a new Result with the error generated by <paramref name="onFailure"/>.
    /// </returns>
    public static async Task<Result> ElseAsync(this Task<Result> task, Func<Error[], Task<Error>> onFailure, CancellationToken cancellationToken = default)
    {
        Result result = await task.WithCancellation(cancellationToken);
        return await result.ElseAsync(onFailure, cancellationToken);
    }

    /// <summary>
    /// Awaits a Task and, if the operation failed, executes an asynchronous function to generate multiple errors.
    /// </summary>
    /// <param name="task">The Task producing a Result.</param>
    /// <param name="onFailure">An asynchronous function that takes the current errors and returns a Task producing a collection of new errors.</param>
    /// <param name="cancellationToken"></param>
    /// <returns>
    /// A Task containing the original Result if the operation succeeded; otherwise, a new Result with the errors generated by <paramref name="onFailure"/>.
    /// </returns>
    public static async Task<Result> ElseAsync(this Task<Result> task, Func<Error[], Task<IEnumerable<Error>>> onFailure, CancellationToken cancellationToken = default)
    {
        Result result = await task.WithCancellation(cancellationToken);
        return await result.ElseAsync(onFailure, cancellationToken);
    }

    /// <summary>
    /// Awaits a Task and, if the operation failed, replaces the current errors with a specified asynchronous error.
    /// </summary>
    /// <param name="task">The Task producing a Result.</param>
    /// <param name="onFailure">A Task producing the new error to replace the current errors.</param>
    /// <param name="cancellationToken"></param>
    /// <returns>
    /// A Task containing the original Result if the operation succeeded; otherwise, a new Result with the specified error.
    /// </returns>
    public static async Task<Result> ElseAsync(this Task<Result> task, Task<Error> onFailure, CancellationToken cancellationToken = default)
    {
        Result result = await task.WithCancellation(cancellationToken);
        return await result.ElseAsync(onFailure, cancellationToken);
    }
}